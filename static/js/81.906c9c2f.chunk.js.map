{"version":3,"file":"static/js/81.906c9c2f.chunk.js","mappings":"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","sources":["components/Section/Section.styled.js","components/Section/Section.jsx","redux/contacts/selectors.js","components/Form/SimpleForm.jsx","components/ContactsList/Contact/Contact.styled.js","components/ContactsList/Contact/Contact.jsx","components/ContactsList/ContactList.styled.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const NewSection = styled.section`\n  font-size: 20px;\n  font-weight: 600;\n  width: max-content;\n`;\nexport const SectionTitle = styled.h2`\n  margin: 0 0 20px 0;\n  font-size: x-large;\n`;\n","import PropTypes from 'prop-types';\nimport { NewSection, SectionTitle } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n    return (\n        <NewSection>\n            {title ? <SectionTitle>{title}</SectionTitle> : null}\n            {children}\n        </NewSection>\n    )\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const contactsSelector = createSelector(\n  [state => state.contacts],\n  contacts => {\n    return contacts;\n  }\n);\nexport const filterSelector = createSelector(\n  [state => state.filter.filter],\n  filter => filter\n);\n","import { Formik } from 'formik';\nimport * as yup from 'yup';\nimport {\n  Button,\n  ErrMassage,\n  FieldNew,\n  InputContainer,\n  Lable,\n  NewForm,\n} from './SimpleForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsSelector } from 'redux/contacts/selectors';\nimport { addContactThunk } from 'redux/contacts/asyncThuncs';\n\nconst userSchema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2, 'To short name!')\n    .max(24, 'To long name!')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Invalid name format!'\n    )\n    .trim()\n    .required('Field is required!'),\n  number: yup\n    .string()\n    .min(7, 'To short phone!')\n    .max(18, 'To long phone!')\n    .matches(\n      /\\+?\\d{1,4}[-.\\s]?\\(?\\d{1,3}\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'The phone number format is incorrect!'\n    )\n    .trim()\n    .required('Field is required!'),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const SimpleForm = () => {\n  const { contacts } = useSelector(contactsSelector);\n  const dispatch = useDispatch();\n\n  const onSubmit = (values, { resetForm }) => {\n    if (contacts.find(el => el.name === values.name)) {\n      alert(`${values.name} is already in contacts`);\n      resetForm();\n      return;\n    }\n    dispatch(addContactThunk(values));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={userSchema}\n    >\n      <NewForm autoComplete=\"on\">\n        <InputContainer>\n          <Lable htmlFor=\"userName\">Name</Lable>\n          <FieldNew\n            id=\"userName\"\n            type=\"text\"\n            name=\"name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            placeholder=\"Jone Smit\"\n          />\n          <ErrMassage component=\"p\" name=\"name\" />\n        </InputContainer>\n        <InputContainer>\n          <Lable htmlFor=\"userPhone\">Number</Lable>\n          <FieldNew\n            id=\"userPhone\"\n            type=\"tel\"\n            name=\"number\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            placeholder=\"+380-55-555-55-55\"\n          />\n          <ErrMassage component=\"p\" name=\"number\" />\n        </InputContainer>\n        <Button type=\"submit\">Add contact</Button>\n      </NewForm>\n    </Formik>\n  );\n};\n","import { Button } from 'components/Form/SimpleForm.styled';\nimport styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  justify-content: space-between;\n  margin-bottom: 10px;\n`;\nexport const Doters = styled.div`\n  flex-grow: 1;\n  align-self: center;\n  height: 100%;\n  border-bottom: 3px dotted black;\n`;\nexport const DelButton = styled(Button)`\n  &:hover {\n    background: red;\n    box-shadow: 0 0 30px 5px rgba(0, 142, 236, 0.815);\n    -webkit-transition: all 0.2s ease-out;\n    -moz-transition: all 0.2s ease-out;\n    transition: all 0.2s ease-out;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { DelButton, Doters, Item } from './Contact.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContactThunk } from 'redux/contacts/asyncThuncs';\n\nexport const Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n  return (\n    <Item>\n      <div>{contact.name}</div>\n      <Doters></Doters>\n      <div>{contact.number}</div>\n      <DelButton\n        type=\"button\"\n        onClick={() => dispatch(deleteContactThunk(contact.id))}\n      >\n        Delete\n      </DelButton>\n    </Item>\n  );\n};\nContact.propTypes = {\n  contact: PropTypes.shape({\n    number: PropTypes.string,\n    name: PropTypes.string,\n    id: PropTypes.string,\n  }),\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  width: calc((1vh + 1vw) * 24);\n`;\n","import { contactsSelector, filterSelector } from 'redux/contacts/selectors';\nimport { Contact } from './Contact/Contact';\n\nimport { List } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\n\nexport const ContactsList = () => {\n  const { contacts } = useSelector(contactsSelector);\n  const filter = useSelector(filterSelector);\n\n  const filteredCotacts = contacts.filter(el =>\n    el.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <List>\n      {contacts.length === 0 ? (\n        <li>\n          <h3>Sorry, but the list is empty!</h3>\n        </li>\n      ) : filter ? (\n        filteredCotacts.map(contact => (\n          <Contact contact={contact} key={contact.id} />\n        ))\n      ) : (\n        contacts.map(contact => <Contact contact={contact} key={contact.id} />)\n      )}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  padding: 8px;\n  width: 100%;\n  margin-top: 10px;\n\n  border-radius: 8px;\n`;\nexport const FilterContStyled = styled.div`\n  margin-top: 45px;\n`;\n","import { FilterContStyled, Input } from './Filter.styled';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterSelector } from 'redux/contacts/selectors';\nimport { Lable } from 'components/Form/SimpleForm.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(filterSelector);\n  const dispatch = useDispatch();\n  return (\n    <FilterContStyled>\n      <Lable htmlFor=\"filter\">Find contacts by name</Lable>\n      <Input\n        id=\"filter\"\n        type=\"text\"\n        name=\"filter\"\n        onChange={({ target: { value } }) => dispatch(setFilter(value))}\n        value={filter}\n      />\n    </FilterContStyled>\n  );\n};\n","import styled from 'styled-components';\nimport bg from '../../image/bg.jpg';\nexport const Container = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  gap: 35px;\n  height: calc(100vh - 80px);\n  background-image: url(${bg});\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: 50%;\n  padding: 25px;\n`;\n","import React, { useEffect } from 'react';\nimport { Section } from '../../components/Section/Section';\nimport { SimpleForm } from '../../components/Form/SimpleForm';\nimport { ContactsList } from '../../components/ContactsList/ContactsList';\nimport { Filter } from '../../components/Filter/Filter';\nimport { Container } from './Contacts.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContactsThunk } from 'redux/contacts/asyncThuncs';\nimport { contactsSelector } from 'redux/contacts/selectors';\nimport { ThreeDots } from 'react-loader-spinner';\nimport { selectIsAuth } from 'redux/auth/selectors';\n\nconst Contacts = () => {\n  const { isLoading } = useSelector(contactsSelector);\n  const isAuth = useSelector(selectIsAuth);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    isAuth && dispatch(fetchContactsThunk());\n  }, [dispatch, isAuth]);\n  return (\n    <Container>\n      <Section>\n        <SimpleForm />\n        <Filter />\n      </Section>\n      {isLoading ? (\n        <ThreeDots\n          height=\"100\"\n          width=\"100\"\n          radius=\"9\"\n          color=\"#212121\"\n          wrapperStyle={{ margin: '0 auto' }}\n          visible={true}\n        />\n      ) : (\n        <Section title=\"Contacts\">\n          <ContactsList />\n        </Section>\n      )}\n    </Container>\n  );\n};\nexport default Contacts;\n"],"names":["NewSection","styled","_templateObject","_taggedTemplateLiteral","SectionTitle","_templateObject2","Section","_ref","title","children","_jsxs","_jsx","contactsSelector","createSelector","state","contacts","filterSelector","filter","userSchema","yup","shape","name","min","max","matches","trim","required","number","initialValues","SimpleForm","useSelector","dispatch","useDispatch","Formik","onSubmit","values","resetForm","find","el","alert","concat","addContactThunk","validationSchema","NewForm","autoComplete","InputContainer","Lable","htmlFor","FieldNew","id","type","placeholder","ErrMassage","component","Button","Item","Doters","DelButton","_templateObject3","Contact","contact","onClick","deleteContactThunk","List","ContactsList","filteredCotacts","toLowerCase","includes","length","map","Input","FilterContStyled","Filter","onChange","value","target","setFilter","Container","bg","isLoading","isAuth","selectIsAuth","useEffect","fetchContactsThunk","ThreeDots","height","width","radius","color","wrapperStyle","margin","visible"],"sourceRoot":""}